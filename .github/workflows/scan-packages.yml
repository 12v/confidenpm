name: Scan NPM Packages for Security Issues

on:
  schedule:
    - cron: '*/5 * * * *'  # Run every 5 minutes
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  issues: write

concurrency:
  group: npm-scanning-${{ matrix.job_id }}
  cancel-in-progress: false

jobs:
  scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job_id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Install Semgrep
        run: |
          python3 -m pip install semgrep

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Install project dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create temp directories
        run: |
          mkdir -p temp
          mkdir -p data

      - name: Scan pending packages (Job ${{ matrix.job_id }}/20)
        run: |
          # Get and scan packages that were discovered but not yet scanned
          node dist/index.js scan-pending --job-id ${{ matrix.job_id }} --total-jobs 20
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_ACTOR: ${{ github.actor }}
          DISABLE_GITHUB_ISSUES: true

      - name: Cleanup temporary files
        if: always()
        run: |
          rm -rf temp/*
          sudo rm -rf /tmp/npm-scanner-*

      - name: Commit state changes (Job ${{ matrix.job_id }})
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -f data/state.json ]; then
            echo "State file found, committing changes..."

            # Retry logic for git operations with random delay
            max_attempts=5
            attempt=1

            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts"

              # Pull latest changes first
              if git pull origin main --rebase; then
                git add data/state.json

                if git diff --staged --quiet; then
                  echo "No state changes to commit"
                  break
                else
                  if git commit -m "Update scanning state from job ${{ matrix.job_id }} [skip ci]"; then
                    if git push; then
                      echo "State successfully committed and pushed"
                      break
                    else
                      echo "Push failed, retrying..."
                    fi
                  else
                    echo "Commit failed, retrying..."
                  fi
                fi
              else
                echo "Pull failed, retrying..."
              fi

              # Exponential backoff with jitter (1-30 seconds)
              delay=$((RANDOM % 30 + 1))
              echo "Retrying in ${delay} seconds..."
              sleep $delay
              attempt=$((attempt + 1))
            done

            if [ $attempt -gt $max_attempts ]; then
              echo "Failed to commit after $max_attempts attempts"
              exit 1
            fi
          else
            echo "WARNING: No state file found - this may cause duplicate processing"
            exit 0
          fi