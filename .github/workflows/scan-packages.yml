name: Scan NPM Packages for Security Issues

on:
  schedule:
    - cron: '15 */2 * * *'  # Run every 2 hours at 15 minutes past
  workflow_dispatch:
    inputs:
      package_names:
        description: 'Package names to scan (comma-separated, e.g. "express,lodash,react")'
        required: false
        type: string
      package_version:
        description: 'Package version to scan (only applies when scanning single package)'
        required: false
        type: string
      hours_back:
        description: 'Hours to look back for recent packages'
        required: false
        default: '2'
        type: string

permissions:
  contents: write
  issues: write

concurrency:
  group: npm-scanning
  cancel-in-progress: false

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup scanning matrix
        id: setup-matrix
        run: |
          if [ "${{ github.event.inputs.package_names }}" != "" ]; then
            echo 'matrix={"specific_packages":[1]}' >> $GITHUB_OUTPUT
          else
            echo 'matrix={"batch":[1]}' >> $GITHUB_OUTPUT
          fi

  scan:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Install Semgrep
        run: |
          python3 -m pip install semgrep

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Install project dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create temp directories
        run: |
          mkdir -p temp
          mkdir -p data

      - name: Scan specific packages
        if: matrix.specific_packages
        run: |
          IFS=',' read -ra PACKAGES <<< "${{ github.event.inputs.package_names }}"
          for package in "${PACKAGES[@]}"; do
            package=$(echo "$package" | xargs)  # Trim whitespace
            echo "Scanning package: $package"
            node dist/index.js scan "$package" \
              ${{ github.event.inputs.package_version && format('--version {0}', github.event.inputs.package_version) || '' }}
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Scan recent packages
        if: matrix.batch
        run: |
          node dist/index.js scan-recent ${{ github.event.inputs.hours_back || '2' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Cleanup temporary files
        if: always()
        run: |
          rm -rf temp/*
          sudo rm -rf /tmp/npm-scanner-*

      - name: Commit state changes
        if: matrix.batch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -f data/state.json ]; then
            echo "State file found, committing changes..."
            git add data/state.json

            if git diff --staged --quiet; then
              echo "No state changes to commit"
            else
              git commit -m "Update scanning state [skip ci]"
              git push
              echo "State successfully committed and pushed"
            fi
          else
            echo "WARNING: No state file found - this may cause duplicate processing"
            exit 0
          fi