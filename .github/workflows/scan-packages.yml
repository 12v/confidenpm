name: Scan NPM Packages for Security Issues

on:
  schedule:
    - cron: '*/5 * * * *'  # Run every 5 minutes
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: npm-scanning
  cancel-in-progress: false

permissions:
  contents: write
  issues: write

jobs:
  scan:
    strategy:
      matrix:
        job_id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Install Semgrep
        run: |
          python3 -m pip install --user semgrep
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Verify Semgrep installation
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          which semgrep
          semgrep --version

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Install project dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create temp directories
        run: |
          mkdir -p temp
          mkdir -p data

      - name: Scan pending packages (Job ${{ matrix.job-id }}/20)
        run: |
          # Ensure Semgrep is in PATH
          export PATH="$HOME/.local/bin:$PATH"
          # Get and scan packages that were discovered but not yet scanned
          node dist/index.js scan-pending --job-id ${{ matrix.job-id }} --total-jobs 20
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_ACTOR: ${{ github.actor }}
          DISABLE_GITHUB_ISSUES: true

      - name: Cleanup temporary files
        if: always()
        run: |
          rm -rf temp/*
          sudo rm -rf /tmp/npm-scanner-*

      - name: Upload scanning results (Job ${{ matrix.job-id }})
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: scan-results-job-${{ matrix.job-id }}
          path: data/scanned-packages-new.txt
          if-no-files-found: ignore

  consolidate:
    needs: scan
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          pattern: scan-results-job-*
          path: artifacts/
          merge-multiple: true

      - name: Consolidate scan results
        run: |
          echo "Consolidating scan results from all jobs..."

          # Create data directory if it doesn't exist
          mkdir -p data

          # Count artifacts downloaded
          artifact_count=$(find artifacts/ -name "scanned-packages-new.txt" | wc -l)
          echo "Found $artifact_count scan result files"

          if [ $artifact_count -gt 0 ]; then
            # Combine all new scanned packages
            cat artifacts/*/scanned-packages-new.txt > data/all-new-scanned.txt 2>/dev/null || true

            # Sort and deduplicate, then append to main file
            if [ -f data/all-new-scanned.txt ] && [ -s data/all-new-scanned.txt ]; then
              echo "Processing $(wc -l < data/all-new-scanned.txt) new scanned packages"

              # Create or update the main scanned packages file
              touch data/scanned-packages.txt

              # Combine existing and new, sort and deduplicate
              cat data/scanned-packages.txt data/all-new-scanned.txt | sort | uniq > data/scanned-packages-updated.txt
              mv data/scanned-packages-updated.txt data/scanned-packages.txt

              # Clean up
              rm -f data/all-new-scanned.txt

              echo "Updated scanned packages file with deduplicated results"
            else
              echo "No new packages to add"
            fi
          else
            echo "No scan results found from any job"
          fi

      - name: Commit consolidated results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -f data/scanned-packages.txt ]; then
            git add data/scanned-packages.txt

            if git diff --staged --quiet; then
              echo "No changes to commit"
            else
              git commit -m "Update scanning state [skip ci]"
              git push
              echo "Successfully committed consolidated scan results"
            fi
          else
            echo "No scanned packages file to commit"
          fi